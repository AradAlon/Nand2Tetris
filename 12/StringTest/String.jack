// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
 class String {

    field Array string;
    field int len, max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let string = Array.new(maxLength);
        let max = maxLength;
        let len = 0;
     
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(string);

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < max) {
            do setCharAt(len, c);
            let len = len + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, sing;

        let i = 0;
        let sing = 1;

        if ((len > 0) & (charAt(i) = 45)){
            let sing = -1;
            let i = i + 1;
        }
        
        while (i < len & (47 < charAt(i)) & (charAt(i) < 58)) {
            let val = (val * 10) + (charAt(i) - 48);
            let i = i + 1;
        }

        return (sing * val);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        
        do setIntLoop(val);

        return;
    }

    method void setIntLoop(int val) {
        var int last;
        var char c;

        let last = val - (val / 10 * 10);
        let c = (last + 48);
        
        if (val < 10) {
            do appendChar(c);
        }
        else {
            do setIntLoop(val / 10);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }
    
    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }
    
    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
