// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
 class Math {
    static Array powers_of_two;

    /** Initializes the library. */
    function void init() {
        let powers_of_two = Array.new(16);
        let powers_of_two[0] = 1;
        let powers_of_two[1] = 2;
        let powers_of_two[2] = 4;
        let powers_of_two[3] = 8;
        let powers_of_two[4] = 16;
        let powers_of_two[5] = 32;
        let powers_of_two[6] = 64;
        let powers_of_two[7] = 128;
        let powers_of_two[8] = 256;
        let powers_of_two[9] = 512;
        let powers_of_two[10] = 1024;
        let powers_of_two[11] = 2048;
        let powers_of_two[12] = 4096;
        let powers_of_two[13] = 8192;
        let powers_of_two[14] = 16384;
        let powers_of_two[15] = 32767 + 1;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            let x = -x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, optimize, two, i;
        var boolean sign;

        if ((x = 0) | (y = 0)) {
            return 0;
        }

        let sum = 0;
        
        let sign = (((x < 0) & (y > 0))| ((x > 0) & (y < 0)));
        
        let x = Math.abs(x);
        let y = Math.abs(y);
        
        if (x < y){
            let optimize = x;
            let x = y;
            let y = optimize;
        }

        let i = 0;
        let two = 0;
        while ((two - 1) < (y - 1)) {
            if (Math.bit(y, i)) {
                let sum = sum + x;
                let two = two + powers_of_two[i];
            }
            let x = x + x;
            let i = i + 1;
        }
        
        if (sign) {
            let sum = -sum;
        }
        return sum;
    }

    // Returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i) {
        return ~((x & powers_of_two[i]) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var Array powers_of_y;
        var int index, div;
        var boolean negative, three;
        let powers_of_y = Array.new(16);
        if (y = 0) {
            do Sys.error(3);
        }
        
        
        let negative = (((x < 0) & (y > 0)) | ((x > 0) & (y < 0)));
        let index = 0;
        let three = false;
        
        let powers_of_y[0] = Math.abs(y);
        let x = Math.abs(x);

        while ((index < 15) & (~three)) {
            let three = ((32767 - (powers_of_y[index] - 1)) < (powers_of_y[index] - 1));

            if (~three) {
                let powers_of_y[index + 1] = powers_of_y[index] + powers_of_y[index];
                let three = ((powers_of_y[index + 1] - 1) > (x - 1));
                if (~three) {
                    let index = index + 1;
                }
            }
        }

        while (index > (-1)) {
            if (~((powers_of_y[index] - 1) > (x - 1))) {
                let div = div + powers_of_two[index];
                let x = x - powers_of_y[index];
            }
            let index = index - 1;
        }
        if (negative) {
            let div = -div;
        } 

        return div;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, tmp, y;

        let i = 7;
        let y = 0;
        while (i > -1) {
            let tmp = y + powers_of_two[i];
            if (~((tmp * tmp) > x) & ((tmp * tmp) > 0)) {
                let y = tmp;
            }
            let i = i - 1;
        }
        
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { 
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) { 
            return b;
        }

        return a;
    }
}
